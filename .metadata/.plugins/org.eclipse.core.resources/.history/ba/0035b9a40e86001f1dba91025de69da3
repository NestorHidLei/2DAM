package actividad203.seguridad;

import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.util.Arrays;

import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

public class CifraAESApp {

	private String INSTANCIAFABRICACLAVE = "";
	private static String MENSAJE_POR_DEFECTO = "Mensaje de prueba";
	private static char[] PASSWORD_POR_DEFECTO = "pass123".toCharArray();
	private byte[] SALT = "prueba de cadena para salt".getBytes();
	private int ITERATIONS = 100;
	private int KEYSIZE = 256;
	private String mensaje;
	private char[] password;
	
	

	

	public CifraAESApp(String iNSTANCIAFABRICACLAVE, byte[] sALT, int iTERATIONS, int kEYSIZE, String mensaje,
			char[] password) {
		this.INSTANCIAFABRICACLAVE = iNSTANCIAFABRICACLAVE;
		this.SALT = sALT;
		this.ITERATIONS = iTERATIONS;
		this.KEYSIZE = kEYSIZE;
		this.mensaje = mensaje;
		this.password = password;
	}
	
	

	public String getINSTANCIAFABRICACLAVE() {
		return INSTANCIAFABRICACLAVE;
	}



	public static String getMENSAJE_POR_DEFECTO() {
		return MENSAJE_POR_DEFECTO;
	}



	public static char[] getPASSWORD_POR_DEFECTO() {
		return PASSWORD_POR_DEFECTO;
	}



	public byte[] getSALT() {
		return SALT;
	}



	public int getITERATIONS() {
		return ITERATIONS;
	}



	public int getKEYSIZE() {
		return KEYSIZE;
	}



	public String getMensaje() {
		return mensaje;
	}



	public char[] getPassword() {
		return password;
	}

	
	public Key getClaveCifrado() throws NoSuchAlgorithmException, InvalidKeySpecException {
		// preparamos la clave a utilizar HMAC
		// Cojo una instancia de la f치brica de claves (est치 en la clase Util PBKDF2WithHmacSHA256)
		SecretKeyFactory fabricaClave = SecretKeyFactory.getInstance(this.getINSTANCIAFABRICACLAVE());
		// Indico la PBE a utilizar con la clave, el salt, las iteraciones y el tama침o de clave
		PBEKeySpec especificaClave = new PBEKeySpec(this.getPassword(), this.getSALT(),
		this.getITERATIONS(), this.getKEYSIZE());
		// Genero una clave secreta con el tipo de f치brica y las especificaciones de la clave
		SecretKey claveSecreta = fabricaClave.generateSecret(especificaClave);
		Key key = new SecretKeySpec(especificacionAES.getEncoded(), "AES");

		return key;
	}


	public static void main(String[] args) {
		String mensaje = args.length > 0 ? args[0] : MENSAJE_POR_DEFECTO;
		char[] password = args.length > 0 ? args[1] : PASSWORD_POR_DEFECTO;
//		String mensaje = MENSAJE_POR_DEFECTO;
//		char[] password = PASSWORD_POR_DEFECTO;
//		if (args.length == 2) {
//			mensaje = args[0];
//			password = args[1].toCharArray();
//		} else if (args.length == 1) {
//			mensaje = args[0];
//		}
	}

}
